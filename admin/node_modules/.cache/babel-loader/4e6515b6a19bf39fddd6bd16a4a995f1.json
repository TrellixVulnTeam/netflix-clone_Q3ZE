{"ast":null,"code":"const MovieReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_MOVIES_START\":\n      return {\n        movies: [],\n        isFetching: true,\n        error: false\n      };\n\n    case \"GET_MOVIES_SUCCESS\":\n      return {\n        movies: action.payload,\n        isFetching: false,\n        error: false\n      };\n\n    case \"GET_MOVIES_FAILURE\":\n      return {\n        movies: [],\n        isFetching: false,\n        error: true\n      };\n\n    case \"CREATE_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"CREATE_MOVIE_SUCCESS\":\n      return {\n        movies: [...state.movies, action.payload],\n        isFetching: false,\n        error: false\n      };\n\n    case \"CREATE_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"UPLOAD_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"UPLOAD_MOVIE_SUCCESS\":\n      return {\n        movies: state.movies.map(movie => movie._id === action.payload._id && action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"UPLOAD_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"DELETE_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"DELETE_MOVIE_SUCCESS\":\n      return {\n        movies: state.movies.filter(movie => movie._id !== action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"DELETE_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = MovieReducer;\nexport default MovieReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieReducer\");","map":{"version":3,"sources":["/Users/simoncatalin/Desktop/JavaScript/netflix-clone/admin/src/context/movieContext/MovieReducer.js"],"names":["MovieReducer","state","action","type","movies","isFetching","error","payload","map","movie","_id","filter"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,kBAAL;AACI,aAAO;AACHC,QAAAA,MAAM,EAAE,EADL;AAEHC,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO;AACHF,QAAAA,MAAM,EAAEF,MAAM,CAACK,OADZ;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO;AACHF,QAAAA,MAAM,EAAE,EADL;AAEHC,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO;AACHF,QAAAA,MAAM,EAAE,CAAC,GAAGH,KAAK,CAACG,MAAV,EAAkBF,MAAM,CAACK,OAAzB,CADL;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO;AACHF,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaI,GAAb,CAAkBC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcR,MAAM,CAACK,OAAP,CAAeG,GAA7B,IAAoCR,MAAM,CAACK,OAAvE,CADL;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO;AACHF,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaO,MAAb,CAAqBF,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcR,MAAM,CAACK,OAApD,CADL;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ;AACI,aAAO,EAAE,GAAGL;AAAL,OAAP;AA1ER;AA6EH,CA9ED;;KAAMD,Y;AAgFN,eAAeA,YAAf","sourcesContent":["const MovieReducer = (state, action) => {\n    switch (action.type) {\n        case \"GET_MOVIES_START\":\n            return {\n                movies: [],\n                isFetching: true,\n                error: false\n            };\n        case \"GET_MOVIES_SUCCESS\":\n            return {\n                movies: action.payload,\n                isFetching: false,\n                error: false\n            };\n        case \"GET_MOVIES_FAILURE\":\n            return {\n                movies: [],\n                isFetching: false,\n                error: true\n            };\n        case \"CREATE_MOVIE_START\":\n            return {\n                ...state,\n                isFetching: true,\n                error: false\n            };\n        case \"CREATE_MOVIE_SUCCESS\":\n            return {\n                movies: [...state.movies, action.payload],\n                isFetching: false,\n                error: false\n            };\n        case \"CREATE_MOVIE_FAILURE\":\n            return {\n                ...state,\n                isFetching: false,\n                error: true\n            };\n        case \"UPLOAD_MOVIE_START\":\n            return {\n                ...state,\n                isFetching: true,\n                error: false\n            };\n        case \"UPLOAD_MOVIE_SUCCESS\":\n            return {\n                movies: state.movies.map((movie) => movie._id === action.payload._id && action.payload),\n                isFetching: false,\n                error: false\n            };\n        case \"UPLOAD_MOVIE_FAILURE\":\n            return {\n                ...state,\n                isFetching: false,\n                error: true\n            };\n        case \"DELETE_MOVIE_START\":\n            return {\n                ...state,\n                isFetching: true,\n                error: false\n            };\n        case \"DELETE_MOVIE_SUCCESS\":\n            return {\n                movies: state.movies.filter((movie) => movie._id !== action.payload),\n                isFetching: false,\n                error: false\n            };\n        case \"DELETE_MOVIE_FAILURE\":\n            return {\n                ...state,\n                isFetching: false,\n                error: true\n            };\n        default:\n            return { ...state };\n    }\n\n};\n\nexport default MovieReducer;"]},"metadata":{},"sourceType":"module"}