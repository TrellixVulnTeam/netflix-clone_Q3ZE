{"ast":null,"code":"import { getMoviesStart, getMoviesFailure, getMoviesSuccess, deleteMovieStart, deleteMovieSuccess, deleteMovieFailure, createMovieStart, createMovieSuccess, createMovieFailure } from '../movieContext/MovieActions';\nimport axios from 'axios'; // GET\n\nexport const getMovies = async dispatch => {\n  dispatch(getMoviesStart());\n\n  try {\n    const res = await axios.get('/movies', {\n      headers: {\n        token: 'Bearer ' + JSON.parse(localStorage.getItem('user')).accessToken\n      }\n    });\n    dispatch(getMoviesSuccess(res.data));\n  } catch (err) {\n    dispatch(getMoviesFailure());\n  }\n}; // CREATE\n\nexport const createMovie = async (movie, dispatch) => {\n  dispatch(createMovieStart());\n\n  try {\n    const res = await axios.post('/movies/', movie, {\n      headers: {\n        token: 'Bearer ' + JSON.parse(localStorage.getItem('user')).accessToken\n      }\n    });\n    dispatch(createMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(createMovieFailure());\n  }\n}; // DELETE\n\nexport const deleteMovie = async (id, dispatch) => {\n  dispatch(deleteMovieStart());\n\n  try {\n    await axios.delete('/movies/' + id, {\n      headers: {\n        token: 'Bearer ' + JSON.parse(localStorage.getItem('user')).accessToken\n      }\n    });\n    dispatch(deleteMovieSuccess(id));\n  } catch (err) {\n    dispatch(deleteMovieFailure());\n  }\n};","map":{"version":3,"sources":["/Users/simoncatalin/Desktop/JavaScript/netflix-clone/admin/src/context/movieContext/apiCalls.js"],"names":["getMoviesStart","getMoviesFailure","getMoviesSuccess","deleteMovieStart","deleteMovieSuccess","deleteMovieFailure","createMovieStart","createMovieSuccess","createMovieFailure","axios","getMovies","dispatch","res","get","headers","token","JSON","parse","localStorage","getItem","accessToken","data","err","createMovie","movie","post","deleteMovie","id","delete"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA2CC,gBAA3C,EAA6DC,gBAA7D,EAA+EC,kBAA/E,EAAmGC,kBAAnG,EAAuHC,gBAAvH,EAAyIC,kBAAzI,EAA6JC,kBAA7J,QAAuL,8BAAvL;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAP,IAAoB;AACzCA,EAAAA,QAAQ,CAACX,cAAc,EAAf,CAAR;;AAEA,MAAI;AACA,UAAMY,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAN,CAAU,SAAV,EAAqB;AACnCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,YAAYC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC;AADvD;AAD0B,KAArB,CAAlB;AAKAT,IAAAA,QAAQ,CAACT,gBAAgB,CAACU,GAAG,CAACS,IAAL,CAAjB,CAAR;AACH,GAPD,CAOE,OAAMC,GAAN,EAAW;AACTX,IAAAA,QAAQ,CAACV,gBAAgB,EAAjB,CAAR;AACH;AACJ,CAbM,C,CAeP;;AACA,OAAO,MAAMsB,WAAW,GAAG,OAAOC,KAAP,EAAcb,QAAd,KAA2B;AAClDA,EAAAA,QAAQ,CAACL,gBAAgB,EAAjB,CAAR;;AAEA,MAAI;AACA,UAAMM,GAAG,GAAG,MAAMH,KAAK,CAACgB,IAAN,CAAW,UAAX,EAAuBD,KAAvB,EAA8B;AAC5CV,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,YAAYC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC;AADvD;AADmC,KAA9B,CAAlB;AAKAT,IAAAA,QAAQ,CAACJ,kBAAkB,CAACK,GAAG,CAACS,IAAL,CAAnB,CAAR;AACH,GAPD,CAOE,OAAMC,GAAN,EAAW;AACTX,IAAAA,QAAQ,CAACH,kBAAkB,EAAnB,CAAR;AACH;AACJ,CAbM,C,CAeP;;AACA,OAAO,MAAMkB,WAAW,GAAG,OAAOC,EAAP,EAAWhB,QAAX,KAAwB;AAC/CA,EAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;;AAEA,MAAI;AACA,UAAMM,KAAK,CAACmB,MAAN,CAAa,aAAaD,EAA1B,EAA8B;AAChCb,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,YAAYC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC;AADvD;AADuB,KAA9B,CAAN;AAKAT,IAAAA,QAAQ,CAACP,kBAAkB,CAACuB,EAAD,CAAnB,CAAR;AACH,GAPD,CAOE,OAAML,GAAN,EAAW;AACTX,IAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AACH;AACJ,CAbM","sourcesContent":["import { getMoviesStart, getMoviesFailure, getMoviesSuccess, deleteMovieStart, deleteMovieSuccess, deleteMovieFailure, createMovieStart, createMovieSuccess, createMovieFailure } from '../movieContext/MovieActions';\nimport axios from 'axios';\n\n// GET\nexport const getMovies = async (dispatch) => {\n    dispatch(getMoviesStart());\n\n    try {\n        const res = await axios.get('/movies', {\n            headers: {\n                token: 'Bearer ' + JSON.parse(localStorage.getItem('user')).accessToken,\n            }\n        });\n        dispatch(getMoviesSuccess(res.data));\n    } catch(err) {\n        dispatch(getMoviesFailure());\n    }\n};\n\n// CREATE\nexport const createMovie = async (movie, dispatch) => {\n    dispatch(createMovieStart());\n\n    try {\n        const res = await axios.post('/movies/', movie, {\n            headers: {\n                token: 'Bearer ' + JSON.parse(localStorage.getItem('user')).accessToken,\n            }\n        });\n        dispatch(createMovieSuccess(res.data));\n    } catch(err) {\n        dispatch(createMovieFailure());\n    }\n};\n\n// DELETE\nexport const deleteMovie = async (id, dispatch) => {\n    dispatch(deleteMovieStart());\n\n    try {\n        await axios.delete('/movies/' + id, {\n            headers: {\n                token: 'Bearer ' + JSON.parse(localStorage.getItem('user')).accessToken,\n            }\n        });\n        dispatch(deleteMovieSuccess(id));\n    } catch(err) {\n        dispatch(deleteMovieFailure());\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}